// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1MutexHolding MutexHolding describes the mutex and the object which is holding it.
//
// swagger:model io.argoproj.workflow.v1alpha1.MutexHolding
type IoArgoprojWorkflowV1alpha1MutexHolding struct {

	// Holder is a reference to the object which holds the Mutex. Holding Scenario:
	//   1. Current workflow's NodeID which is holding the lock.
	//      e.g: ${NodeID}
	// Waiting Scenario:
	//   1. Current workflow or other workflow NodeID which is holding the lock.
	//      e.g: ${WorkflowName}/${NodeID}
	Holder string `json:"holder,omitempty"`

	// Reference for the mutex e.g: ${namespace}/mutex/${mutexName}
	Mutex string `json:"mutex,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 mutex holding
func (m *IoArgoprojWorkflowV1alpha1MutexHolding) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this io argoproj workflow v1alpha1 mutex holding based on context it is used
func (m *IoArgoprojWorkflowV1alpha1MutexHolding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1MutexHolding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1MutexHolding) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1MutexHolding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
