// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1RetryStrategy RetryStrategy provides controls on how to retry a workflow step
//
// swagger:model io.argoproj.workflow.v1alpha1.RetryStrategy
type IoArgoprojWorkflowV1alpha1RetryStrategy struct {

	// Backoff is a backoff strategy
	Backoff *IoArgoprojWorkflowV1alpha1Backoff `json:"backoff,omitempty"`

	// Limit is the maximum number of attempts when retrying a container
	Limit IoK8sApimachineryPkgUtilIntstrIntOrString `json:"limit,omitempty"`

	// RetryPolicy is a policy of NodePhase statuses that will be retried
	RetryPolicy string `json:"retryPolicy,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 retry strategy
func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackoff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) validateBackoff(formats strfmt.Registry) error {
	if swag.IsZero(m.Backoff) { // not required
		return nil
	}

	if m.Backoff != nil {
		if err := m.Backoff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backoff")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := m.Limit.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("limit")
		}
		return err
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 retry strategy based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackoff(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) contextValidateBackoff(ctx context.Context, formats strfmt.Registry) error {

	if m.Backoff != nil {
		if err := m.Backoff.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backoff")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) contextValidateLimit(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Limit.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("limit")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1RetryStrategy) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1RetryStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
