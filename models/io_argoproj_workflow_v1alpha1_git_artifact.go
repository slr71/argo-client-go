// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1GitArtifact GitArtifact is the location of an git artifact
//
// swagger:model io.argoproj.workflow.v1alpha1.GitArtifact
type IoArgoprojWorkflowV1alpha1GitArtifact struct {

	// Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
	Depth int64 `json:"depth,omitempty"`

	// Fetch specifies a number of refs that should be fetched before checkout
	Fetch []string `json:"fetch"`

	// InsecureIgnoreHostKey disables SSH strict host key checking during git clone
	InsecureIgnoreHostKey bool `json:"insecureIgnoreHostKey,omitempty"`

	// PasswordSecret is the secret selector to the repository password
	PasswordSecret *IoK8sAPICoreV1SecretKeySelector `json:"passwordSecret,omitempty"`

	// Repo is the git repository
	// Required: true
	Repo *string `json:"repo"`

	// Revision is the git commit, tag, branch to checkout
	Revision string `json:"revision,omitempty"`

	// SSHPrivateKeySecret is the secret selector to the repository ssh private key
	SSHPrivateKeySecret *IoK8sAPICoreV1SecretKeySelector `json:"sshPrivateKeySecret,omitempty"`

	// UsernameSecret is the secret selector to the repository username
	UsernameSecret *IoK8sAPICoreV1SecretKeySelector `json:"usernameSecret,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 git artifact
func (m *IoArgoprojWorkflowV1alpha1GitArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePasswordSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPrivateKeySecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsernameSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) validatePasswordSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordSecret) { // not required
		return nil
	}

	if m.PasswordSecret != nil {
		if err := m.PasswordSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) validateRepo(formats strfmt.Registry) error {

	if err := validate.Required("repo", "body", m.Repo); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) validateSSHPrivateKeySecret(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHPrivateKeySecret) { // not required
		return nil
	}

	if m.SSHPrivateKeySecret != nil {
		if err := m.SSHPrivateKeySecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeySecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) validateUsernameSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.UsernameSecret) { // not required
		return nil
	}

	if m.UsernameSecret != nil {
		if err := m.UsernameSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usernameSecret")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 git artifact based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1GitArtifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePasswordSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPrivateKeySecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsernameSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) contextValidatePasswordSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordSecret != nil {
		if err := m.PasswordSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) contextValidateSSHPrivateKeySecret(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPrivateKeySecret != nil {
		if err := m.SSHPrivateKeySecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeySecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1GitArtifact) contextValidateUsernameSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.UsernameSecret != nil {
		if err := m.UsernameSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usernameSecret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1GitArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1GitArtifact) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1GitArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
