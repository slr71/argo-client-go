// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1Prometheus Prometheus is a prometheus metric to be emitted
//
// swagger:model io.argoproj.workflow.v1alpha1.Prometheus
type IoArgoprojWorkflowV1alpha1Prometheus struct {

	// Counter is a counter metric
	Counter *IoArgoprojWorkflowV1alpha1Counter `json:"counter,omitempty"`

	// Gauge is a gauge metric
	Gauge *IoArgoprojWorkflowV1alpha1Gauge `json:"gauge,omitempty"`

	// Help is a string that describes the metric
	// Required: true
	Help *string `json:"help"`

	// Histogram is a histogram metric
	Histogram *IoArgoprojWorkflowV1alpha1Histogram `json:"histogram,omitempty"`

	// Labels is a list of metric labels
	Labels []*IoArgoprojWorkflowV1alpha1MetricLabel `json:"labels"`

	// Name is the name of the metric
	// Required: true
	Name *string `json:"name"`

	// When is a conditional statement that decides when to emit the metric
	When string `json:"when,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 prometheus
func (m *IoArgoprojWorkflowV1alpha1Prometheus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGauge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistogram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) validateCounter(formats strfmt.Registry) error {
	if swag.IsZero(m.Counter) { // not required
		return nil
	}

	if m.Counter != nil {
		if err := m.Counter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) validateGauge(formats strfmt.Registry) error {
	if swag.IsZero(m.Gauge) { // not required
		return nil
	}

	if m.Gauge != nil {
		if err := m.Gauge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gauge")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) validateHelp(formats strfmt.Registry) error {

	if err := validate.Required("help", "body", m.Help); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) validateHistogram(formats strfmt.Registry) error {
	if swag.IsZero(m.Histogram) { // not required
		return nil
	}

	if m.Histogram != nil {
		if err := m.Histogram.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("histogram")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 prometheus based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1Prometheus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCounter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGauge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHistogram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) contextValidateCounter(ctx context.Context, formats strfmt.Registry) error {

	if m.Counter != nil {
		if err := m.Counter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) contextValidateGauge(ctx context.Context, formats strfmt.Registry) error {

	if m.Gauge != nil {
		if err := m.Gauge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gauge")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) contextValidateHistogram(ctx context.Context, formats strfmt.Registry) error {

	if m.Histogram != nil {
		if err := m.Histogram.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("histogram")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Prometheus) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Prometheus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Prometheus) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1Prometheus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
