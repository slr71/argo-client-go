// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1Link A link to another app.
//
// swagger:model io.argoproj.workflow.v1alpha1.Link
type IoArgoprojWorkflowV1alpha1Link struct {

	// The name of the link, E.g. "Workflow Logs" or "Pod Logs"
	// Required: true
	Name *string `json:"name"`

	// Either "workflow" or "pod"
	// Required: true
	Scope *string `json:"scope"`

	// The URL. May contain "${metadata.namespace}" and "${metadata.name}".
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this io argoproj workflow v1alpha1 link
func (m *IoArgoprojWorkflowV1alpha1Link) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Link) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Link) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Link) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this io argoproj workflow v1alpha1 link based on context it is used
func (m *IoArgoprojWorkflowV1alpha1Link) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Link) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Link) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1Link
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
