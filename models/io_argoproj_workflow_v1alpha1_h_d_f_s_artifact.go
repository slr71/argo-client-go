// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1HDFSArtifact HDFSArtifact is the location of an HDFS artifact
//
// swagger:model io.argoproj.workflow.v1alpha1.HDFSArtifact
type IoArgoprojWorkflowV1alpha1HDFSArtifact struct {

	// Addresses is accessible addresses of HDFS name nodes
	// Required: true
	Addresses []string `json:"addresses"`

	// Force copies a file forcibly even if it exists (default: false)
	Force bool `json:"force,omitempty"`

	// HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
	HdfsUser string `json:"hdfsUser,omitempty"`

	// KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.
	KrbCCacheSecret *IoK8sAPICoreV1SecretKeySelector `json:"krbCCacheSecret,omitempty"`

	// KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.
	KrbConfigConfigMap *IoK8sAPICoreV1ConfigMapKeySelector `json:"krbConfigConfigMap,omitempty"`

	// KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.
	KrbKeytabSecret *IoK8sAPICoreV1SecretKeySelector `json:"krbKeytabSecret,omitempty"`

	// KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
	KrbRealm string `json:"krbRealm,omitempty"`

	// KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
	KrbServicePrincipalName string `json:"krbServicePrincipalName,omitempty"`

	// KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
	KrbUsername string `json:"krbUsername,omitempty"`

	// Path is a file path in HDFS
	// Required: true
	Path *string `json:"path"`
}

// Validate validates this io argoproj workflow v1alpha1 h d f s artifact
func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKrbCCacheSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKrbConfigConfigMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKrbKeytabSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) validateAddresses(formats strfmt.Registry) error {

	if err := validate.Required("addresses", "body", m.Addresses); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) validateKrbCCacheSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.KrbCCacheSecret) { // not required
		return nil
	}

	if m.KrbCCacheSecret != nil {
		if err := m.KrbCCacheSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("krbCCacheSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) validateKrbConfigConfigMap(formats strfmt.Registry) error {
	if swag.IsZero(m.KrbConfigConfigMap) { // not required
		return nil
	}

	if m.KrbConfigConfigMap != nil {
		if err := m.KrbConfigConfigMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("krbConfigConfigMap")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) validateKrbKeytabSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.KrbKeytabSecret) { // not required
		return nil
	}

	if m.KrbKeytabSecret != nil {
		if err := m.KrbKeytabSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("krbKeytabSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 h d f s artifact based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKrbCCacheSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKrbConfigConfigMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKrbKeytabSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) contextValidateKrbCCacheSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.KrbCCacheSecret != nil {
		if err := m.KrbCCacheSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("krbCCacheSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) contextValidateKrbConfigConfigMap(ctx context.Context, formats strfmt.Registry) error {

	if m.KrbConfigConfigMap != nil {
		if err := m.KrbConfigConfigMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("krbConfigConfigMap")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) contextValidateKrbKeytabSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.KrbKeytabSecret != nil {
		if err := m.KrbKeytabSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("krbKeytabSecret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1HDFSArtifact) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1HDFSArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
