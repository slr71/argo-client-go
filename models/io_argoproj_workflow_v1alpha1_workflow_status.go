// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1WorkflowStatus WorkflowStatus contains overall status information about a workflow
//
// swagger:model io.argoproj.workflow.v1alpha1.WorkflowStatus
type IoArgoprojWorkflowV1alpha1WorkflowStatus struct {

	// Compressed and base64 decoded Nodes map
	CompressedNodes string `json:"compressedNodes,omitempty"`

	// Conditions is a list of conditions the Workflow may have
	Conditions []*IoArgoprojWorkflowV1alpha1Condition `json:"conditions"`

	// Time at which this workflow completed
	// Format: date-time
	FinishedAt IoK8sApimachineryPkgApisMetaV1Time `json:"finishedAt,omitempty"`

	// A human readable message indicating details about why the workflow is in this condition.
	Message string `json:"message,omitempty"`

	// Nodes is a mapping between a node ID and the node's status.
	Nodes map[string]IoArgoprojWorkflowV1alpha1NodeStatus `json:"nodes,omitempty"`

	// Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
	OffloadNodeStatusVersion string `json:"offloadNodeStatusVersion,omitempty"`

	// Outputs captures output values and artifact locations produced by the workflow via global outputs
	Outputs *IoArgoprojWorkflowV1alpha1Outputs `json:"outputs,omitempty"`

	// PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
	PersistentVolumeClaims []*IoK8sAPICoreV1Volume `json:"persistentVolumeClaims"`

	// Phase a simple, high-level summary of where the workflow is in its lifecycle.
	Phase string `json:"phase,omitempty"`

	// ResourcesDuration is the total for the workflow
	ResourcesDuration map[string]int64 `json:"resourcesDuration,omitempty"`

	// Time at which this workflow started
	// Format: date-time
	StartedAt IoK8sApimachineryPkgApisMetaV1Time `json:"startedAt,omitempty"`

	// StoredTemplates is a mapping between a template ref and the node's status.
	StoredTemplates map[string]IoArgoprojWorkflowV1alpha1Template `json:"storedTemplates,omitempty"`

	// StoredWorkflowSpec stores the WorkflowTemplate spec for future execution.
	StoredWorkflowTemplateSpec *IoArgoprojWorkflowV1alpha1WorkflowSpec `json:"storedWorkflowTemplateSpec,omitempty"`

	// Synchronization stores the status of synchronization locks
	Synchronization *IoArgoprojWorkflowV1alpha1SynchronizationStatus `json:"synchronization,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 workflow status
func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentVolumeClaims(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoredTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoredWorkflowTemplateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSynchronization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := m.FinishedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("finishedAt")
		}
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for k := range m.Nodes {

		if err := validate.Required("nodes"+"."+k, "body", m.Nodes[k]); err != nil {
			return err
		}
		if val, ok := m.Nodes[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateOutputs(formats strfmt.Registry) error {
	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	if m.Outputs != nil {
		if err := m.Outputs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputs")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validatePersistentVolumeClaims(formats strfmt.Registry) error {
	if swag.IsZero(m.PersistentVolumeClaims) { // not required
		return nil
	}

	for i := 0; i < len(m.PersistentVolumeClaims); i++ {
		if swag.IsZero(m.PersistentVolumeClaims[i]) { // not required
			continue
		}

		if m.PersistentVolumeClaims[i] != nil {
			if err := m.PersistentVolumeClaims[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("persistentVolumeClaims" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := m.StartedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startedAt")
		}
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateStoredTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.StoredTemplates) { // not required
		return nil
	}

	for k := range m.StoredTemplates {

		if err := validate.Required("storedTemplates"+"."+k, "body", m.StoredTemplates[k]); err != nil {
			return err
		}
		if val, ok := m.StoredTemplates[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateStoredWorkflowTemplateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.StoredWorkflowTemplateSpec) { // not required
		return nil
	}

	if m.StoredWorkflowTemplateSpec != nil {
		if err := m.StoredWorkflowTemplateSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storedWorkflowTemplateSpec")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) validateSynchronization(formats strfmt.Registry) error {
	if swag.IsZero(m.Synchronization) { // not required
		return nil
	}

	if m.Synchronization != nil {
		if err := m.Synchronization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("synchronization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 workflow status based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinishedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersistentVolumeClaims(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoredTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoredWorkflowTemplateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSynchronization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateFinishedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FinishedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("finishedAt")
		}
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Nodes {

		if val, ok := m.Nodes[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateOutputs(ctx context.Context, formats strfmt.Registry) error {

	if m.Outputs != nil {
		if err := m.Outputs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputs")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidatePersistentVolumeClaims(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PersistentVolumeClaims); i++ {

		if m.PersistentVolumeClaims[i] != nil {
			if err := m.PersistentVolumeClaims[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("persistentVolumeClaims" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateStartedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StartedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startedAt")
		}
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateStoredTemplates(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.StoredTemplates {

		if val, ok := m.StoredTemplates[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateStoredWorkflowTemplateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.StoredWorkflowTemplateSpec != nil {
		if err := m.StoredWorkflowTemplateSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storedWorkflowTemplateSpec")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) contextValidateSynchronization(ctx context.Context, formats strfmt.Registry) error {

	if m.Synchronization != nil {
		if err := m.Synchronization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("synchronization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1WorkflowStatus) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1WorkflowStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
