// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1CronWorkflowSpec CronWorkflowSpec is the specification of a CronWorkflow
//
// swagger:model io.argoproj.workflow.v1alpha1.CronWorkflowSpec
type IoArgoprojWorkflowV1alpha1CronWorkflowSpec struct {

	// ConcurrencyPolicy is the K8s-style concurrency policy that will be used
	ConcurrencyPolicy string `json:"concurrencyPolicy,omitempty"`

	// FailedJobsHistoryLimit is the number of successful jobs to be kept at a time
	FailedJobsHistoryLimit int32 `json:"failedJobsHistoryLimit,omitempty"`

	// Schedule is a schedule to run the Workflow in Cron format
	// Required: true
	Schedule *string `json:"schedule"`

	// StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
	StartingDeadlineSeconds int64 `json:"startingDeadlineSeconds,omitempty"`

	// SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
	SuccessfulJobsHistoryLimit int32 `json:"successfulJobsHistoryLimit,omitempty"`

	// Suspend is a flag that will stop new CronWorkflows from running if set to true
	Suspend bool `json:"suspend,omitempty"`

	// Timezone is the timezone against which the cron schedule will be calculated, e.g. "Asia/Tokyo". Default is machine's local time.
	Timezone string `json:"timezone,omitempty"`

	// WorkflowMetadata contains some metadata of the workflow to be run
	WorkflowMetadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"workflowMetadata,omitempty"`

	// WorkflowSpec is the spec of the workflow to be run
	// Required: true
	WorkflowSpec *IoArgoprojWorkflowV1alpha1WorkflowSpec `json:"workflowSpec"`
}

// Validate validates this io argoproj workflow v1alpha1 cron workflow spec
func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) validateWorkflowMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkflowMetadata) { // not required
		return nil
	}

	if m.WorkflowMetadata != nil {
		if err := m.WorkflowMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) validateWorkflowSpec(formats strfmt.Registry) error {

	if err := validate.Required("workflowSpec", "body", m.WorkflowSpec); err != nil {
		return err
	}

	if m.WorkflowSpec != nil {
		if err := m.WorkflowSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 cron workflow spec based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWorkflowMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) contextValidateWorkflowMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkflowMetadata != nil {
		if err := m.WorkflowMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) contextValidateWorkflowSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkflowSpec != nil {
		if err := m.WorkflowSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1CronWorkflowSpec) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1CronWorkflowSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
