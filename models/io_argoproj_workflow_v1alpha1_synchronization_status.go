// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1SynchronizationStatus SynchronizationStatus stores the status of semaphore and mutex.
//
// swagger:model io.argoproj.workflow.v1alpha1.SynchronizationStatus
type IoArgoprojWorkflowV1alpha1SynchronizationStatus struct {

	// Mutex stores this workflow's mutex holder details
	Mutex *IoArgoprojWorkflowV1alpha1MutexStatus `json:"mutex,omitempty"`

	// Semaphore stores this workflow's Semaphore holder details
	Semaphore *IoArgoprojWorkflowV1alpha1SemaphoreStatus `json:"semaphore,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 synchronization status
func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSemaphore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) validateMutex(formats strfmt.Registry) error {
	if swag.IsZero(m.Mutex) { // not required
		return nil
	}

	if m.Mutex != nil {
		if err := m.Mutex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutex")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) validateSemaphore(formats strfmt.Registry) error {
	if swag.IsZero(m.Semaphore) { // not required
		return nil
	}

	if m.Semaphore != nil {
		if err := m.Semaphore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("semaphore")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 synchronization status based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMutex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSemaphore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) contextValidateMutex(ctx context.Context, formats strfmt.Registry) error {

	if m.Mutex != nil {
		if err := m.Mutex.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutex")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) contextValidateSemaphore(ctx context.Context, formats strfmt.Registry) error {

	if m.Semaphore != nil {
		if err := m.Semaphore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("semaphore")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1SynchronizationStatus) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1SynchronizationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
