// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1ArtifactoryArtifact ArtifactoryArtifact is the location of an artifactory artifact
//
// swagger:model io.argoproj.workflow.v1alpha1.ArtifactoryArtifact
type IoArgoprojWorkflowV1alpha1ArtifactoryArtifact struct {

	// PasswordSecret is the secret selector to the repository password
	PasswordSecret *IoK8sAPICoreV1SecretKeySelector `json:"passwordSecret,omitempty"`

	// URL of the artifact
	// Required: true
	URL *string `json:"url"`

	// UsernameSecret is the secret selector to the repository username
	UsernameSecret *IoK8sAPICoreV1SecretKeySelector `json:"usernameSecret,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 artifactory artifact
func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePasswordSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsernameSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) validatePasswordSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordSecret) { // not required
		return nil
	}

	if m.PasswordSecret != nil {
		if err := m.PasswordSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) validateUsernameSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.UsernameSecret) { // not required
		return nil
	}

	if m.UsernameSecret != nil {
		if err := m.UsernameSecret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usernameSecret")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 artifactory artifact based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePasswordSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsernameSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) contextValidatePasswordSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordSecret != nil {
		if err := m.PasswordSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordSecret")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) contextValidateUsernameSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.UsernameSecret != nil {
		if err := m.UsernameSecret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usernameSecret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1ArtifactoryArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
