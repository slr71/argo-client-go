// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1Parameter Parameter indicate a passed string parameter to a service template with an optional default value
//
// swagger:model io.argoproj.workflow.v1alpha1.Parameter
type IoArgoprojWorkflowV1alpha1Parameter struct {

	// Default is the default value to use for an input parameter if a value was not supplied
	Default string `json:"default,omitempty"`

	// GlobalName exports an output parameter to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters
	GlobalName string `json:"globalName,omitempty"`

	// Name is the parameter name
	// Required: true
	Name *string `json:"name"`

	// Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values
	Value string `json:"value,omitempty"`

	// ValueFrom is the source for the output parameter's value
	ValueFrom *IoArgoprojWorkflowV1alpha1ValueFrom `json:"valueFrom,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 parameter
func (m *IoArgoprojWorkflowV1alpha1Parameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Parameter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Parameter) validateValueFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueFrom) { // not required
		return nil
	}

	if m.ValueFrom != nil {
		if err := m.ValueFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valueFrom")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 parameter based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1Parameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValueFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Parameter) contextValidateValueFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.ValueFrom != nil {
		if err := m.ValueFrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valueFrom")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Parameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Parameter) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1Parameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
