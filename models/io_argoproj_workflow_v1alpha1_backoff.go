// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1Backoff Backoff is a backoff strategy to use within retryStrategy
//
// swagger:model io.argoproj.workflow.v1alpha1.Backoff
type IoArgoprojWorkflowV1alpha1Backoff struct {

	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	Duration string `json:"duration,omitempty"`

	// Factor is a factor to multiply the base duration after each failed retry
	Factor IoK8sApimachineryPkgUtilIntstrIntOrString `json:"factor,omitempty"`

	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	MaxDuration string `json:"maxDuration,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 backoff
func (m *IoArgoprojWorkflowV1alpha1Backoff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFactor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Backoff) validateFactor(formats strfmt.Registry) error {
	if swag.IsZero(m.Factor) { // not required
		return nil
	}

	if err := m.Factor.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("factor")
		}
		return err
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 backoff based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1Backoff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Backoff) contextValidateFactor(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Factor.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("factor")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Backoff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Backoff) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1Backoff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
