// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest io argoproj workflow v1alpha1 workflow submit request
//
// swagger:model io.argoproj.workflow.v1alpha1.WorkflowSubmitRequest
type IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest struct {

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// resource kind
	ResourceKind string `json:"resourceKind,omitempty"`

	// resource name
	ResourceName string `json:"resourceName,omitempty"`

	// submit options
	SubmitOptions *IoArgoprojWorkflowV1alpha1SubmitOpts `json:"submitOptions,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 workflow submit request
func (m *IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubmitOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest) validateSubmitOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmitOptions) { // not required
		return nil
	}

	if m.SubmitOptions != nil {
		if err := m.SubmitOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submitOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 workflow submit request based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubmitOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest) contextValidateSubmitOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SubmitOptions != nil {
		if err := m.SubmitOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("submitOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
