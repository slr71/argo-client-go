// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1Submit io argoproj workflow v1alpha1 submit
//
// swagger:model io.argoproj.workflow.v1alpha1.Submit
type IoArgoprojWorkflowV1alpha1Submit struct {

	// Arguments extracted from the event and then set as arguments to the workflow created.
	Arguments *IoArgoprojWorkflowV1alpha1Arguments `json:"arguments,omitempty"`

	// WorkflowTemplateRef the workflow template to submit
	// Required: true
	WorkflowTemplateRef *IoArgoprojWorkflowV1alpha1WorkflowTemplateRef `json:"workflowTemplateRef"`
}

// Validate validates this io argoproj workflow v1alpha1 submit
func (m *IoArgoprojWorkflowV1alpha1Submit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowTemplateRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Submit) validateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	if m.Arguments != nil {
		if err := m.Arguments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arguments")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Submit) validateWorkflowTemplateRef(formats strfmt.Registry) error {

	if err := validate.Required("workflowTemplateRef", "body", m.WorkflowTemplateRef); err != nil {
		return err
	}

	if m.WorkflowTemplateRef != nil {
		if err := m.WorkflowTemplateRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowTemplateRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 submit based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1Submit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowTemplateRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Submit) contextValidateArguments(ctx context.Context, formats strfmt.Registry) error {

	if m.Arguments != nil {
		if err := m.Arguments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arguments")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Submit) contextValidateWorkflowTemplateRef(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkflowTemplateRef != nil {
		if err := m.WorkflowTemplateRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowTemplateRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Submit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Submit) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1Submit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
