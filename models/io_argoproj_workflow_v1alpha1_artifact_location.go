// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1ArtifactLocation ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.
//
// swagger:model io.argoproj.workflow.v1alpha1.ArtifactLocation
type IoArgoprojWorkflowV1alpha1ArtifactLocation struct {

	// ArchiveLogs indicates if the container logs should be archived
	ArchiveLogs bool `json:"archiveLogs,omitempty"`

	// Artifactory contains artifactory artifact location details
	Artifactory *IoArgoprojWorkflowV1alpha1ArtifactoryArtifact `json:"artifactory,omitempty"`

	// GCS contains GCS artifact location details
	Gcs *IoArgoprojWorkflowV1alpha1GCSArtifact `json:"gcs,omitempty"`

	// Git contains git artifact location details
	Git *IoArgoprojWorkflowV1alpha1GitArtifact `json:"git,omitempty"`

	// HDFS contains HDFS artifact location details
	Hdfs *IoArgoprojWorkflowV1alpha1HDFSArtifact `json:"hdfs,omitempty"`

	// HTTP contains HTTP artifact location details
	HTTP *IoArgoprojWorkflowV1alpha1HTTPArtifact `json:"http,omitempty"`

	// OSS contains OSS artifact location details
	Oss *IoArgoprojWorkflowV1alpha1OSSArtifact `json:"oss,omitempty"`

	// Raw contains raw artifact location details
	Raw *IoArgoprojWorkflowV1alpha1RawArtifact `json:"raw,omitempty"`

	// S3 contains S3 artifact location details
	S3 *IoArgoprojWorkflowV1alpha1S3Artifact `json:"s3,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 artifact location
func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateArtifactory(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifactory) { // not required
		return nil
	}

	if m.Artifactory != nil {
		if err := m.Artifactory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactory")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateGcs(formats strfmt.Registry) error {
	if swag.IsZero(m.Gcs) { // not required
		return nil
	}

	if m.Gcs != nil {
		if err := m.Gcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateGit(formats strfmt.Registry) error {
	if swag.IsZero(m.Git) { // not required
		return nil
	}

	if m.Git != nil {
		if err := m.Git.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateHdfs(formats strfmt.Registry) error {
	if swag.IsZero(m.Hdfs) { // not required
		return nil
	}

	if m.Hdfs != nil {
		if err := m.Hdfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfs")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateHTTP(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTP) { // not required
		return nil
	}

	if m.HTTP != nil {
		if err := m.HTTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateOss(formats strfmt.Registry) error {
	if swag.IsZero(m.Oss) { // not required
		return nil
	}

	if m.Oss != nil {
		if err := m.Oss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oss")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateRaw(formats strfmt.Registry) error {
	if swag.IsZero(m.Raw) { // not required
		return nil
	}

	if m.Raw != nil {
		if err := m.Raw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) validateS3(formats strfmt.Registry) error {
	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if m.S3 != nil {
		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 artifact location based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifactory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOss(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateArtifactory(ctx context.Context, formats strfmt.Registry) error {

	if m.Artifactory != nil {
		if err := m.Artifactory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactory")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateGcs(ctx context.Context, formats strfmt.Registry) error {

	if m.Gcs != nil {
		if err := m.Gcs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateGit(ctx context.Context, formats strfmt.Registry) error {

	if m.Git != nil {
		if err := m.Git.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateHdfs(ctx context.Context, formats strfmt.Registry) error {

	if m.Hdfs != nil {
		if err := m.Hdfs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfs")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateHTTP(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTP != nil {
		if err := m.HTTP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateOss(ctx context.Context, formats strfmt.Registry) error {

	if m.Oss != nil {
		if err := m.Oss.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oss")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.Raw != nil {
		if err := m.Raw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) contextValidateS3(ctx context.Context, formats strfmt.Registry) error {

	if m.S3 != nil {
		if err := m.S3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1ArtifactLocation) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1ArtifactLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
