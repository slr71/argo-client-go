// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1Version io argoproj workflow v1alpha1 version
//
// swagger:model io.argoproj.workflow.v1alpha1.Version
type IoArgoprojWorkflowV1alpha1Version struct {

	// build date
	// Required: true
	BuildDate *string `json:"buildDate"`

	// compiler
	// Required: true
	Compiler *string `json:"compiler"`

	// git commit
	// Required: true
	GitCommit *string `json:"gitCommit"`

	// git tag
	// Required: true
	GitTag *string `json:"gitTag"`

	// git tree state
	// Required: true
	GitTreeState *string `json:"gitTreeState"`

	// go version
	// Required: true
	GoVersion *string `json:"goVersion"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this io argoproj workflow v1alpha1 version
func (m *IoArgoprojWorkflowV1alpha1Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompiler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitTreeState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateBuildDate(formats strfmt.Registry) error {

	if err := validate.Required("buildDate", "body", m.BuildDate); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateCompiler(formats strfmt.Registry) error {

	if err := validate.Required("compiler", "body", m.Compiler); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateGitCommit(formats strfmt.Registry) error {

	if err := validate.Required("gitCommit", "body", m.GitCommit); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateGitTag(formats strfmt.Registry) error {

	if err := validate.Required("gitTag", "body", m.GitTag); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateGitTreeState(formats strfmt.Registry) error {

	if err := validate.Required("gitTreeState", "body", m.GitTreeState); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateGoVersion(formats strfmt.Registry) error {

	if err := validate.Required("goVersion", "body", m.GoVersion); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1Version) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this io argoproj workflow v1alpha1 version based on context it is used
func (m *IoArgoprojWorkflowV1alpha1Version) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Version) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1Version) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1Version
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
