// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1ResourceTemplate ResourceTemplate is a template subtype to manipulate kubernetes resources
//
// swagger:model io.argoproj.workflow.v1alpha1.ResourceTemplate
type IoArgoprojWorkflowV1alpha1ResourceTemplate struct {

	// Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch
	// Required: true
	Action *string `json:"action"`

	// FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed
	FailureCondition string `json:"failureCondition,omitempty"`

	// Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [
	// 	"--validate=false"  # disable resource validation
	// ]
	Flags []string `json:"flags"`

	// Manifest contains the kubernetes manifest
	Manifest string `json:"manifest,omitempty"`

	// MergeStrategy is the strategy used to merge a patch. It defaults to "strategic" Must be one of: strategic, merge, json
	MergeStrategy string `json:"mergeStrategy,omitempty"`

	// SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.
	SetOwnerReference bool `json:"setOwnerReference,omitempty"`

	// SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step
	SuccessCondition string `json:"successCondition,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 resource template
func (m *IoArgoprojWorkflowV1alpha1ResourceTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1ResourceTemplate) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this io argoproj workflow v1alpha1 resource template based on context it is used
func (m *IoArgoprojWorkflowV1alpha1ResourceTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1ResourceTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1ResourceTemplate) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1ResourceTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
