// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoArgoprojWorkflowV1alpha1SubmitOpts SubmitOpts are workflow submission options
//
// swagger:model io.argoproj.workflow.v1alpha1.SubmitOpts
type IoArgoprojWorkflowV1alpha1SubmitOpts struct {

	// DryRun validates the workflow on the client-side without creating it. This option is not supported in API
	DryRun bool `json:"dryRun,omitempty"`

	// Entrypoint overrides spec.entrypoint
	EntryPoint string `json:"entryPoint,omitempty"`

	// GenerateName overrides metadata.generateName
	GenerateName string `json:"generateName,omitempty"`

	// Labels adds to metadata.labels
	Labels string `json:"labels,omitempty"`

	// Name overrides metadata.name
	Name string `json:"name,omitempty"`

	// OwnerReference creates a metadata.ownerReference
	OwnerReference *IoK8sApimachineryPkgApisMetaV1OwnerReference `json:"ownerReference,omitempty"`

	// ParameterFile holds a reference to a parameter file. This option is not supported in API
	ParameterFile string `json:"parameterFile,omitempty"`

	// Parameters passes input parameters to workflow
	Parameters []string `json:"parameters"`

	// ServerDryRun validates the workflow on the server-side without creating it
	ServerDryRun bool `json:"serverDryRun,omitempty"`

	// ServiceAccount runs all pods in the workflow using specified ServiceAccount.
	ServiceAccount string `json:"serviceAccount,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 submit opts
func (m *IoArgoprojWorkflowV1alpha1SubmitOpts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1SubmitOpts) validateOwnerReference(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerReference) { // not required
		return nil
	}

	if m.OwnerReference != nil {
		if err := m.OwnerReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerReference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 submit opts based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1SubmitOpts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwnerReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1SubmitOpts) contextValidateOwnerReference(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerReference != nil {
		if err := m.OwnerReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1SubmitOpts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1SubmitOpts) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1SubmitOpts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
