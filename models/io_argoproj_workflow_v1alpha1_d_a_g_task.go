// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoArgoprojWorkflowV1alpha1DAGTask DAGTask represents a node in the graph during DAG execution
//
// swagger:model io.argoproj.workflow.v1alpha1.DAGTask
type IoArgoprojWorkflowV1alpha1DAGTask struct {

	// Arguments are the parameter and artifact arguments to the template
	Arguments *IoArgoprojWorkflowV1alpha1Arguments `json:"arguments,omitempty"`

	// ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified
	ContinueOn *IoArgoprojWorkflowV1alpha1ContinueOn `json:"continueOn,omitempty"`

	// Dependencies are name of other targets which this depends on
	Dependencies []string `json:"dependencies"`

	// Depends are name of other targets which this depends on
	Depends string `json:"depends,omitempty"`

	// Name is the name of the target
	// Required: true
	Name *string `json:"name"`

	// OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template.
	OnExit string `json:"onExit,omitempty"`

	// Name of template to execute
	// Required: true
	Template *string `json:"template"`

	// TemplateRef is the reference to the template resource to execute.
	TemplateRef *IoArgoprojWorkflowV1alpha1TemplateRef `json:"templateRef,omitempty"`

	// When is an expression in which the task should conditionally execute
	When string `json:"when,omitempty"`

	// WithItems expands a task into multiple parallel tasks from the items in the list
	WithItems []IoArgoprojWorkflowV1alpha1Item `json:"withItems"`

	// WithParam expands a task into multiple parallel tasks from the value in the parameter, which is expected to be a JSON list.
	WithParam string `json:"withParam,omitempty"`

	// WithSequence expands a task into a numeric sequence
	WithSequence *IoArgoprojWorkflowV1alpha1Sequence `json:"withSequence,omitempty"`
}

// Validate validates this io argoproj workflow v1alpha1 d a g task
func (m *IoArgoprojWorkflowV1alpha1DAGTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContinueOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWithSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) validateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	if m.Arguments != nil {
		if err := m.Arguments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arguments")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) validateContinueOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ContinueOn) { // not required
		return nil
	}

	if m.ContinueOn != nil {
		if err := m.ContinueOn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continueOn")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) validateTemplate(formats strfmt.Registry) error {

	if err := validate.Required("template", "body", m.Template); err != nil {
		return err
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) validateTemplateRef(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplateRef) { // not required
		return nil
	}

	if m.TemplateRef != nil {
		if err := m.TemplateRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) validateWithSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.WithSequence) { // not required
		return nil
	}

	if m.WithSequence != nil {
		if err := m.WithSequence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("withSequence")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io argoproj workflow v1alpha1 d a g task based on the context it is used
func (m *IoArgoprojWorkflowV1alpha1DAGTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContinueOn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWithSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) contextValidateArguments(ctx context.Context, formats strfmt.Registry) error {

	if m.Arguments != nil {
		if err := m.Arguments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arguments")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) contextValidateContinueOn(ctx context.Context, formats strfmt.Registry) error {

	if m.ContinueOn != nil {
		if err := m.ContinueOn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continueOn")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) contextValidateTemplateRef(ctx context.Context, formats strfmt.Registry) error {

	if m.TemplateRef != nil {
		if err := m.TemplateRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoArgoprojWorkflowV1alpha1DAGTask) contextValidateWithSequence(ctx context.Context, formats strfmt.Registry) error {

	if m.WithSequence != nil {
		if err := m.WithSequence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("withSequence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1DAGTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoArgoprojWorkflowV1alpha1DAGTask) UnmarshalBinary(b []byte) error {
	var res IoArgoprojWorkflowV1alpha1DAGTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
